def print_params(a='Строка', b=1, c=True):
    print(a, b, c)


print_params()
print_params('Свои значения', 22, )
print_params(b=25)
print_params(c=[1, 2, 3, ])

# Распаковка параметров
values_list = ['List', 33, True, ]
values_dict = {'a': 'Dict', 'b': 44, 'c': ['Type', 44, True, ]}
print_params(*values_list)
print_params(**values_dict)

# Распаковка + отдельные параметры
values_list2 = ['List2', 55, ]
print_params(*values_list2, 'Ok')

print_params(c=True, b='не по порядку', a='Заполнено')
'''
**Задача "Распаковка"**
1. **Функция с параметрами по умолчанию:**
   - Создайте функцию `print_params(a=1, b='строка', c=True)`, которая выводит эти параметры.
   - Вызовите `print_params` с разным количеством аргументов, включая вызов без аргументов.
   - Проверьте вызовы: `print_params(b=25)` и `print_params(c=[1, 2, 3])`.

2. **Распаковка параметров:**
   - Создайте список `values_list` с тремя элементами разных типов.
   - Создайте словарь `values_dict` с тремя ключами, соответствующими параметрам функции `print_params`, и значениями разных типов.
   - Передайте `values_list` и `values_dict` в функцию `print_params`, используя распаковку параметров (`*` для списка и `**` для словаря).

3. **Распаковка + отдельные параметры:**
   - Создайте список `values_list_2` с двумя элементами разных типов.
   - Проверьте, работает ли `print_params(*values_list_2, 42)`.

**Примечания:**
- Параметры по умолчанию делают функции гибкими и удобными.
- Распаковка параметров из списка и словаря упрощает передачу групп значений в функцию.
- Не используйте изменяемые типы данных (например, списки) в качестве значений по умолчанию для параметров функции, чтобы избежать непредвиденных изменений.

```python
values_list_2 = [54.32, 'Строка']
print_params(*values_list_2, 42)
```

Вывод:
54.32 'Строка' 42
'''