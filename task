3-4
## Задача "Однокоренные"
**Цель:** Написать функцию, которая найдет слова, связанные с заданным словом по корню.
**Описание:**
1. **Функция:** Вам нужно создать функцию `single_root_words`.
   - Она будет принимать два параметра:
      - `root_word`: это основное слово, с которым мы будем сравнивать другие слова.
      - `*other_words`: это список других слов, которые мы будем проверять.
2. **Список результатов:** Внутри функции создайте пустой список `same_words`.  Этот список будет хранить слова, которые связаны с `root_word`.
3. **Цикл:** Пройдите по каждому слову в списке `other_words` с помощью цикла `for`.
4. **Проверка:** Для каждого слова в цикле проверьте, содержит ли оно `root_word` или наоборот, содержит ли `root_word` это слово.
   - **Важно:** Не обращайте внимания на регистр букв (например, "Disablement" и "Able" считаются связанными).
5. **Добавление в список:** Если слово соответствует условию, добавьте его в список `same_words`.
6. **Возврат результата:** После проверки всех слов, верните список `same_words` из функции.
7. **Вызов функции:** Вызовите функцию `single_root_words` с двумя примерами и выведите полученные результаты на экран.
**Ключевые моменты:**
*  Используйте методы строк, такие как `lower()` или `upper()`, чтобы сравнивать слова без учета регистра.
*  Помните, что `in` оператор или метод `count()` могут помочь вам проверить, содержит ли одно слово другое.

3-5
## Задача "Рекурсивное умножение цифр"
**Цель:** Написать функцию, которая вычисляет произведение всех цифр в заданном числе, используя рекурсию.
**Описание:**
1. **Функция:** Вам нужно создать функцию `get_multiplied_digits`, которая принимает целое число `number` в качестве аргумента.
2. **Преобразование в строку:** Преобразуйте число `number` в строку `str_number`.
3. **Отделение первой цифры:** Извлеките первую цифру из `str_number` и сохраните ее в переменной `first` как целое число.
4. **Рекурсивный вызов:**
   - Если `str_number` содержит более одной цифры, вызовите функцию `get_multiplied_digits` повторно с аргументом, который представляет собой оставшуюся часть строки (`str_number[1:]`).
   - Умножьте `first` на результат этого рекурсивного вызова.
5. **Базовый случай:**
   - Если `str_number` содержит только одну цифру (или пустая строка), верните `first`.
6. **Возврат результата:** Верните результат умножения, полученный на шаге 4.
**Рекурсивный стек вызовов:**
Функция будет вызывать себя снова и снова, пока не достигнет базового случая (когда число содержит только одну цифру).
Например, для числа 40203:
`get_multiplied_digits(40203) -> 4 * get_multiplied_digits(203) -> 4 * 2 * get_multiplied_digits(3) -> 4 * 2 * 3`
**Примечания:**
*  Обратите внимание на то, что при преобразовании строки в число `int('00123')`  первые нули будут удалены.
*  Если вы столкнетесь с ошибкой, попробуйте отладить программу пошагово, чтобы понять, где возникает проблема.