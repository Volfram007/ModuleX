def personal_sum(number):
    incorrect_data = 0
    result = 0
    if len(number) > 1:
        if isinstance(number, list):
            for i in number:
                try:
                    result += int(i)
                except:
                    print(f'Некорректный тип данных для подсчёта суммы- {i}')
                    incorrect_data += 1
        elif isinstance(number, str):
            for i in number:
                for j in range(len(i)):
                    print(f"Некорректный тип данных для подсчёта суммы - {i[j]}")
                    incorrect_data += 1

        return result, incorrect_data


def calculate_average(number):
    try:
        summ, incorrect = personal_sum(number)

        return f'{summ / (len(number) - incorrect)}'
    except TypeError:
        print('В numbers записан некорректный тип данных')
        return None
    except ZeroDivisionError:
        return 0


print(f'Результат 1: {calculate_average("1, 2, 3")}')  # Строка перебирается, но каждый символ - строковый тип
print(f'Результат 2: {calculate_average([1, "Строка", 3, "Ещё Строка"])}')  # Учитываются только 1 и 3
print(f'Результат 3: {calculate_average(567)}')  # Передана не коллекция
print(f'Результат 4: {calculate_average([42, 15, 36, 13])}')  # Всё должно работать

'''
### Задача "План перехват"
Напишите две функции:
#### Функция `personal_sum(numbers)`
- Принимает коллекцию `numbers`.
- Подсчитывает сумму чисел в `numbers` и увеличивает переменную `result`.
- При встрече элемента, не являющегося числом, обрабатывает исключение `TypeError`
и увеличивает счётчик `incorrect_data` на 1.
- Возвращает кортеж из двух значений: `result` - сумма чисел, `incorrect_data` - количество некорректных данных.

#### Функция `calculate_average(numbers)`
- Принимает коллекцию `numbers` и возвращает среднее арифметическое всех чисел.
- Для подсчёта суммы использует функцию `personal_sum`.
- Если коллекция `numbers` пустая, обрабатывает исключение `ZeroDivisionError` и возвращает 0.
- Если `numbers` не является коллекцией, обрабатывает исключение `TypeError`, выводя строку
"В numbers записан некорректный тип данных", и возвращает `None`.

#### Пункты задачи:
1. Создайте функцию `personal_sum` на основе условий задачи.
2. Создайте функцию `calculate_average` на основе условий задачи.
3. Вызовите функцию `calculate_average` несколько раз с различными данными.

#### Пример выполнения программы:
```python
print(f'Результат 1: {calculate_average("1, 2, 3")}') # Строка перебирается, но каждый символ - строковый тип
print(f'Результат 2: {calculate_average([1, "Строка", 3, "Ещё Строка"])}') # Учитываются только 1 и 3
print(f'Результат 3: {calculate_average(567)}') # Передана не коллекция
print(f'Результат 4: {calculate_average([42, 15, 36, 13])}') # Всё должно работать
```

#### Вывод на консоль:
Некорректный тип данных для подсчёта суммы - 1
Некорректный тип данных для подсчёта суммы - ,
Некорректный тип данных для подсчёта суммы -
Некорректный тип данных для подсчёта суммы - 2
Некорректный тип данных для подсчёта суммы - ,
Некорректный тип данных для подсчёта суммы -
Некорректный тип данных для подсчёта суммы - 3
Результат 1: 0
Некорректный тип данных для подсчёта суммы - Строка
Некорректный тип данных для подсчёта суммы - Ещё Строка
Результат 2: 2.0
В numbers записан некорректный тип данных
Результат 3: None
Результат 4: 26.5
'''
